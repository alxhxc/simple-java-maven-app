pipeline {
    agent any

    parameters {

        choice(
            name: 'MAVEN_VERSION',
            choices: ['M3'],
            description: 'Select Maven version for the build'
        )
        choice(
            name: 'ENVIRONMENT',
            choices: ['DEV', 'UAT', 'PROD'],
            description: 'Select environment for deployment'
        )

        string(
            name: 'DEPLOYMENT_NAME',
            defaultValue: 'defaultDeployment',
            description: 'Deployment Name'
        )

        string(
            name: 'VERSION',
            defaultValue: '0.0.0',
            description: 'Version of the application'
        )


    }

    tools {
        maven "${params.MAVEN_VERSION}"
    }

    stages {
        stage("Clean Up") {
            steps {
                echo "Cleaning up workspace..."
                deleteDir()
            }
        }

        stage("Clone Repo") {
            steps {
                echo "Cloning Repository..."
                git 'https://github.com/jenkins-docs/simple-java-maven-app.git'
            }
        }

        stage("Build") {
            steps {
                echo "Building the project with Maven ${params.MAVEN_VERSION}..."
                dir('simple-java-maven-app') {
                    sh "mvn clean install"
                }
            }
        }

        stage("Test") {
            steps {
                echo "Running tests..."
                dir('simple-java-maven-app') {
                    sh "mvn test"
                }
            }
        }

/*         stage("Confirm Deployment (only for PROD)") {
            when {
                expression { return params.ENVIRONMENT == 'PROD' }
            }
            steps {
                script {
                    input(
                        id: 'confirmDeploy',
                        message: "You are about to deploy to *PROD* the '${params.VERSION}'. Confirm to continue:",
                        ok: 'Deploy to PROD'
                        cancel: 'Abort Deployment to ${params.ENVIRONMENT}',
                    )
                }
            }
        }  */

        stage("Confirm Deployment (For PROD Only)") {
            when {
                expression { return params.ENVIRONMENT == 'PROD' }
            }
            steps {
                script {
                    def userChoice = input(
                        message: "You are about to deploy to ${params.ENVIRONMENT} the '${params.VERSION}' version. Select Yes/No to continue:",
                        parameters: [
                            choice(
                                name: 'Confirmation',
                                choices: ['Yes', 'No'],
                                description: 'Do you want to proceed with the deployment?'
                            )
                        ]
                    )

                    if (userChoice == 'Yes') {
                        echo "User confirmed deployment to ${params.ENVIRONMENT} - ${params.VERSION}."
                    } else {
                        echo "User chose not to proceed with deployment."	
                        error("Deployment to ${params.ENVIRONMENT} - ${params.VERSION} was cancelled by the user.")
                        currentBuild.result = 'ABORTED'
                    }	
                }
            }
        }

        stage("Deployment") {
            steps {
                echo "Proceeding with deployment ${params.DEPLOYMENT_NAME} - Version: ${params.VERSION} to ${params.ENVIRONMENT} environment..."
                // Aquí iría la lógica real de despliegue, como:
                // sh "./deploy.sh ${params.DEPLOYMENT_NAME} ${params.VERSION} ${params.ENVIRONMENT}"
            }
        }
    }
}
